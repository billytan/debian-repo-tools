#
# baixibao-repo-manager.tcl
#

source common.tcl

source DebianRepository.tcl
source DebianRepositoryCache.tcl

source DebianRemoteRepository.tcl
source DebianLocalRepository.tcl
source IncomingDirRepository.tcl

source DebianRemoteSourceRepository.tcl
source DebianLocalSourceRepository.tcl


set ACTION		[lindex $argv 0]


if { $ACTION == "get-sources" } {

	#
	# generated by "update-sources"
	#
	set list_file			[lindex $argv 1]
	set incoming_dir			[lindex $argv 2]
	
	set _sources			[list]
	
	@ read $list_file { lappend _sources [split $_ "\t"] }
	
	set mirror_url			"http://ftp.cn.debian.org/debian"
	# set mirror_url			"http://192.168.133.126/amd64/debian"
	
	set debian_repo_obj		[DebianRemoteSourceRepository new $mirror_url jessie ]
	
	$debian_repo_obj load_source_packages -verbose

	set count		0
	
	#
	# get the right version 
	#
	foreach _tuple $_sources {

		foreach { _name _ver } $_tuple break

		puts -nonewline "downloading $_name $_ver ..."
		
		set _r			[$debian_repo_obj source $_name]
		
		if [is_empty_list $_r ] { puts " not-found"; continue }
		
		unset -nocomplain _pkg
		array set _pkg $_r
		
		if { $_ver != $_pkg(Version) } { puts " upgraded" ; continue }
		
		#
		# check if already downloaded ...
		#
		set is_downloaded		1
		
		foreach { _fname _fsize } [$debian_repo_obj source $_name -files -size ] {
		
			set _pathname		[file join $incoming_dir $_fname]
			
			# puts "checking $_pathname ..."
			
			if ![file exists $_pathname] { set is_downloaded 0 ; break }
			
			if { $_fsize != [file size $_pathname ] } { set is_downloaded 0 ; break }
		}
		
		if $is_downloaded { puts " skipped" ; continue }
		
		#
		# download the source files
		#
		cd $incoming_dir
		$debian_repo_obj get_source $_name
		
		puts " OK"
		
		incr count ; if { $count > 10 } break
	}
	
	$debian_repo_obj destroy
	
	counter show
}


#
# find out the group of source packages to be updated ...
#
if { $ACTION == "update-sources" } {

	#
	# generate a list of source packages
	#
	set list_file			[lindex $argv 1]

	file delete $list_file
	
	set mirror_url			"http://ftp.cn.debian.org/debian"
	# set mirror_url			"http://192.168.133.126/amd64/debian"
	
	set debian_repo_obj		[DebianRemoteSourceRepository new $mirror_url jessie ]

	set my_repo_obj			[DebianRemoteSourceRepository new "http://192.168.133.88/baixibao/debian"  jessie --components main ]


	$my_repo_obj load_source_packages -verbose
	$debian_repo_obj load_source_packages -verbose
	
	set count		0
	
	$debian_repo_obj foreach_source_package _pkg {
		
		# incr count; if { $count > 10000 } break;
		
		#
		# if the source package exists in local baixibao repo
		#
		set _r		[$my_repo_obj source $_pkg(Package) ]

		if [is_empty_list $_r ] { 

			puts [format "%-40s %-25s" $_pkg(Package) $_pkg(Version) ]
			
			@file "$_pkg(Package)\t$_pkg(Version)" > $list_file
			
			counter +packages_to_add ; continue 
		}
		
		#
		# check if the version is the same ...
		#
		array set local_pkg $_r

		set retcode		[$my_repo_obj compare_version $local_pkg(Version) $_pkg(Version)]
		
		if { $retcode < 0 } { 

			puts [format "%-40s %-25s  --> %-25s" $_pkg(Package) $local_pkg(Version) $_pkg(Version) ]
			
			@file "$_pkg(Package)\t$_pkg(Version)\t$local_pkg(Version)" > $list_file
			
			counter +packages_to_upgrade ; continue 
		}
	}

	$my_repo_obj destroy
	$debian_repo_obj destroy
	
	counter show
}


if { $ACTION == "update-packages" } {

	#
	# generate a list of source packages
	#
	set list_file			[lindex $argv 1]

	file delete $list_file
	
	set mirror_url			"http://192.168.133.126/ppc64/debian"
	
	set debian_repo_obj		[DebianRemoteRepository new $mirror_url sid --arch ppc64 ]

	set my_repo_obj			[DebianRemoteRepository new "http://192.168.133.88/baixibao/debian"  jessie --arch ppc64 ]


	$my_repo_obj load_packages -verbose
	$debian_repo_obj load_packages -verbose
	
	set count		0

	$debian_repo_obj foreach_package _pkg {

		set _name		$_pkg(Package)
		
		#
		# if the package exists in local baixibao repo
		#
		set _r		[$my_repo_obj package $_name ]

		if [is_empty_list $_r ] { 

			puts [format "%-40s %-25s" $_name $_pkg(Version) ]
			
			@file "$_name\t$_pkg(Version)" > $list_file
			
			counter +packages_to_add ; continue 
		}

		#
		# check if the version is the same ...
		#
		array set local_pkg $_r

		set retcode		[$my_repo_obj compare_version $local_pkg(Version) $_pkg(Version)]
		
		if { $retcode < 0 } { 

			puts [format "%-40s %-25s  --> %-25s" $_pkg(Package) $local_pkg(Version) $_pkg(Version) ]
			
			@file "$_pkg(Package)\t$_pkg(Version)\t$local_pkg(Version)" > $list_file
			
			counter +packages_to_upgrade ; continue 
		}

	}
	
	$my_repo_obj destroy
	$debian_repo_obj destroy
	
	counter show
}



#
# scan those packages newly built by buildd instances ...
#
if { $ACTION == "scan-buildd-packages" } {
	
	set incoming_dir	[lindex $argv 1]
	
	set list_file		[lindex $argv 2]
	file delete $list_file
	
	set repo_obj		[IncomingDirRepository new $incoming_dir ]

	$repo_obj load_packages -verbose

	set count		0
	
	$repo_obj foreach_package _pkg {
	
		@file "$_pkg(Source) $_pkg(Version)" > $list_file
		
		incr count ; puts [format "%-40s %-25s" $_pkg(Source) $_pkg(Version)]
	}
	
	puts "total $count (source) packages found."

}


#
# create a list of source packages which need re-build
#
if { $ACTION == "need-build" } {

	#
	# the list of source packages already done by buildd
	#
	set list_file		[lindex $argv 1]
	
	set out_file		[lindex $argv 2]
	file delete $out_file
	
	@ read $list_file {
	
		foreach { _name _ver } $_ break
		
		set buildd($_name)		$_ver
	}
	
	set mirror_url			"http://ftp.cn.debian.org/debian"
	set mirror_url			"http://192.168.133.126/amd64/debian"
	
	set debian_repo_obj		[DebianRemoteRepository new $mirror_url jessie -source 1 ]
	
	$debian_repo_obj load_source_packages -verbose

	$debian_repo_obj foreach_source_package _pkg {
	
		set _name		$_pkg(Package)
		
		if ![info exists buildd($_name)] { counter +packages_to_build ; @file "$_name $_pkg(Version)" > $out_file ; continue }
		
		if { $_pkg(Version) == $buildd($_name) } { counter +packages_done ; continue }
		
		counter +packages_to_rebuild ; @file "$_name $_pkg(Version)" > $out_file 
	}
	
	$debian_repo_obj destroy
	counter show
	
	puts "$out_file created."
}


#
# add buildd packages to baixibao repo, excluding those which need rebuild ...
#
# Usage:
#    $TCLSH $_dir/baixibao-repo-manager.tcl baixibao-update-job-A $REPO_DIR -X $_dir/need-build.list
#
if { $ACTION == "baixibao-update-job-A" } {

	set incoming_dir	[lindex $argv 1]

	set repo_dir		[lindex $argv 2]
	
	#
	# we need to re-build this list of source packages ...
	#
	array set _args [lrange $argv 3 end]
	
	@ read $_args(-X) {
	
		foreach { _name _ver } $_ break
		
		#
		# use hash table for better performance, rather than Tcl list
		#
		set exclude($_name)		$_ver
	}
	
	#
	# we have to scan the local repository in the first place ...
	#
	set repo_obj		[DebianLocalRepository new $repo_dir --arch ppc64 ]

	# $repo_obj load  "$repo_dir/dists/jessie/main/binary-ppc64/Packages.gz" -verbose
	
	#
	# load those buildd packages one by one ...
	#
	set buildd_repo_obj		[IncomingDirRepository new $incoming_dir ]

	$buildd_repo_obj load_packages -verbose

	set count		0
	
	$buildd_repo_obj foreach_package _pkg {
	
		set _name		$_pkg(Source)
		
		if [info exists exclude($_name)] { puts "$_name XXX" ; continue }
		
		#
		# install this package ...
		#
		incr count;  show_progress "installing %4d" $count

		if { $count > 10 } break

		set _fname		[$buildd_repo_obj package $_name -changes]
			
		$repo_obj install [file join $incoming_dir $_fname]
	}
	
	puts "total $count (source) packages installed."
	
	
}



